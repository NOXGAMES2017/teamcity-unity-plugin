

// import org.jetbrains.changelog.Changelog

plugins {
    id 'io.github.rodm.teamcity-server' version "$gradleTeamcityPluginVersion"
    id 'io.github.rodm.teamcity-environments' version "$gradleTeamcityPluginVersion"
    id 'org.jetbrains.changelog' version "$jetbrainsChangelogPluginVersion"
}

/*changelog {
    path = file("../CHANGELOG.md").canonicalPath
    groups = ["Added", "Changed", "Fixed"]
}*/

teamcity {
    setVersion(teamcityVersion)
    allowSnapshotVersions = true

    server {
        descriptor = project.file('teamcity-plugin.xml')
        tokens = [
                Plugin_Version: project.version,
                // new agent API is used since that version
                TeamCity_Min_Compatible_Build: "116751" // 2022.10
        ]

        /*
        publish {
            token = project.findProperty("jetbrains.marketplace.token")
            notes = changelog.renderItem(changelog.getLatest(), Changelog.OutputType.HTML)
        }
        */
    }

    environments {
        downloadsDir = "$teamcityBaseDir/downloads"
        baseHomeDir = file("$teamcityBaseDir/servers")
        baseDataDir = file("$teamcityBaseDir/data")

        "teamcity" {
            version = teamcityVersion.replace("-SNAPSHOT", "")
        }
    }
}

dependencies {
    agent project(path: ':plugin-unity-agent', configuration: 'plugin')

    implementation project(':plugin-unity-common')
    implementation (project(':csharp-parser')) {
        exclude group: 'com.ibm.icu'
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    provided "org.jetbrains.teamcity.internal:server:$teamcityVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "io.kotest:kotest-assertions-core-jvm:$kotestAssertionsCoreJvmVersion"
}

serverPlugin.version = null

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "$jvmTargetVersion"
    }
}

tasks.register("getLatestChangelogVersion") {
    print(changelog.getLatest().version)
}